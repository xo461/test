package com.webjjang.notice.controller;

import java.util.List;

import com.webjjang.main.Controller;
import com.webjjang.main.Service;
import com.webjjang.main.SwitchMain;
import com.webjjang.notice.dto.NoticeDTO;
import com.webjjang.util.io.Input;
import com.webjjang.util.io.Output;
import com.webjjang.view.NoticeView;

public class NoticeController implements Controller {

	// 각각의 서비스 변수 ->생성할 때 초기값으로 생성된 객체를 넣어준다.
	private final Service noticeListService;
	private final Service noticeViewService;
	private final Service noticeWriteService;
	private final Service noticeUpdateService;
	private final Service noticeDeleteService;

	// 생성자 생성 -> 생성 할 때 딱한번 실행 -> 생성을 Beans에서 딱 한번만 하고 있다. 
	// 각각의 서비스를 전달받아서 private
	public NoticeController(
			Service noticeListService, Service noticeViewService, 
			Service noticeWriteService,Service noticeUpdateService, 
			Service noticeDeleteService) {
		// TODO Auto-generated constructor stub
		this.noticeListService = noticeListService;
		this.noticeViewService = noticeViewService;
		this.noticeWriteService = noticeWriteService;
		this.noticeUpdateService = noticeUpdateService;
		this.noticeDeleteService = noticeDeleteService;

	}
	
	@Override
	// public 공공의 - main 패키지의 Main 클래스에서 사용한다.
	public void execute() {

		// 공지사항 처리를 무한 반복 - 0 을 입력하면 이전 메뉴로 간다.(main)
		while (true) {
			// 공지사항 메뉴 출력
			Output.menu("1.리스트   2.보기   3.등록", "4.수정   5.삭제   0.이전메뉴");
			// 공지사항 메뉴 번호 선택
			String menu = Input.getStringWithMessage("메뉴를 입력하세요");
			try {
				// 메인메뉴 처리
				switch (menu) {
				case "1":
					System.out.println("공지사항  리스트 처리");
					// switch 문을 빠져 나간다.
					// break : switch, for, while문을 빠져 나갈때 사용한다.
					// break가 없는 경우는 case에 맞는 값이라서 case 아래로 처리하기 위해 들어오면
					// 그 아래로 case와 상관없이 처리문을 처리하게된다.
					@SuppressWarnings("unchecked") 
					List<NoticeDTO> list 
					= (List<NoticeDTO>) SwitchMain.service(noticeListService, 1);
					NoticeView.list(list);
					break;
				case "2":
					System.out.println("공지사항 보기 처리");
					NoticeView.view(
					getDTO(Input.getIntWithMessageOfSmart("보고싶은 글번호")));
					break;
				case "3":
					System.out.println("공지사항 등록 처리");
					SwitchMain.service(noticeWriteService, inDTO());
					break;
				case "4":
					System.out.println("공지사항 수정 처리");
					NoticeDTO dto 
					= getDTO(Input.getIntWithMessageOfSmart("수정할 글번호를 입력하세요."));
					// -> 가져온 dto의 데이터를 항목별로 수정한다.
					NoticeView.view(dto);
					updateDTO(dto);
					SwitchMain.service(noticeUpdateService, dto);
					
					break;
				case "5":
					System.out.println("공지사항 삭제 처리");
					SwitchMain.service(noticeDeleteService, 
							Input.getIntWithMessageOfSmart("삭제할 글번호 입력"));
					
					
					break;
				case "0":
					// 호출한 곳으로 돌아가라는 명령어 : return :SwitchMain.main() 호출
					return;

				default:
					System.out.println("잘못된 메뉴를 입력하셨습니다. \n다시 입력해 주세요.");
					break;
				}// end of switch
			} catch (Exception e) {
				// TODO: handle exception
			}
		} // end of while
	}// end of execute()

	// 공지사항의 내용을 입력 받는 메서드
		private NoticeDTO inDTO() {
			return new NoticeDTO(
			Input.getStringWithMessage("공지제목"),
			Input.getStringWithMessage("공지내용"),
			Input.getStringWithMessage("공지시작일"),
			Input.getStringWithMessage("공지 종료일")
			);
		}

		// 공지사항 수정 내용을 입력 받는 메서드 
	public NoticeDTO inputDTO() {
		NoticeDTO dto = new NoticeDTO();
		dto.setTitle(Input.getStringWithMessage("제목"));
		dto.setContent(Input.getStringWithMessage("내용"));
//		dto.set(Input.getStringWithMessage("작성자"));
		return dto;

	}

	// DB에서 DTO 가져오는 프로그램 작성
	public NoticeDTO getDTO(int no) throws Exception {
		// 글번호를 받는다.
		return (NoticeDTO) SwitchMain.service(noticeViewService, no);
//		int no = Input.getIntWithMessageOfSmart(msg);
//
//		// 데이터 가져오기
//		NoticeDTO dto = (NoticeDTO) SwitchMain.service(noticeViewService, (Object)no);
//
//		NoticeView.view(dto);

	}

	// 가져온 데이터를 수정하는 메서드
	public void updateDTO(NoticeDTO dto) {
		// 입력 데이터 가 0 이 될 때까지 무한 반복
		while (true) {
			// 변경할 데이터를 선택
			System.out.println("변경내용 선택 -------");
			System.out.println("1.제목 , 2.내용 , 0.수정 완료");
			String menu = Input.getStringWithMessage("수정항목 선택");

			// 수정할 데이터 입력 받는다.
			switch (menu) {
			case "1":
				dto.setTitle(Input.getStringWithMessage("제목"));
				break;
			case "2":
				dto.setContent(Input.getStringWithMessage("내용"));
				break;
			
			case "0":
				return;

			default:
				System.out.println("잘못된 항목을 선택 하셨습니다.");
				break;
			}
			// 데이터가 수정이 되었으면 출력해서 확인 할 수 있도록 제공한다.
		 NoticeView.view(dto);
		}
	}
}// end of NoticeController class
